AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  refStackName: 
    Type: String
  amiId:
    Type: String
  bucket:
    Type: String
Resources: 
# Setup Security Group for Ec2 Instance
  WebappSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web Servers
      VpcId: 
        Fn::ImportValue:
          !Sub "${refStackName}-vpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: WebappSecurityGroup

# Create Ec2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref WebappSecurityGroup
      DisableApiTermination: false
      SubnetId:
        Fn::ImportValue:
          !Sub "${refStackName}-SubA"
      BlockDeviceMappings: 
        - DeviceName: /dev/sdm
          Ebs: 
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 20
      ImageId: !Sub ${amiId}
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash -ex
              yum install httpd -y
              echo "<html>Hello From Server${AWS::Region}</html>" > /var/www/html/index.html;
              cd /var/www/html
              chmod 755 index.html
              service httpd start
              chkconfig httpd on

# Create DynamoDB
  dynamoDB: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "csye6225"
      
# Setup DBSecurity Group
  rdsDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web Servers
      VpcId: 
        Fn::ImportValue:
          !Sub "${refStackName}-vpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: "3306"
        ToPort: "3306"
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-csye6225-rdsDBSecurityGroup
  
# Setup RDS Subnet Group
  rdsSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: "Subnet for RDS instances"
      SubnetIds:
      - Fn::ImportValue:
          !Sub "${refStackName}-SubA"
      - Fn::ImportValue:
          !Sub "${refStackName}-SubB"
      - Fn::ImportValue:
          !Sub "${refStackName}-SubC"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-csye6225-rdsSubnetGroup

#Create RDS Instance
  rdsInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 5
      DBName: csye6225
      Engine: MySQL
      DBInstanceClass: db.t2.medium
      MultiAZ: false
      DBInstanceIdentifier: csye6225-spring2019
      MasterUsername: csye6225master
      MasterUserPassword: csye6225password
      PubliclyAccessible: true
      DBSubnetGroupName: !Ref rdsSubnetGroup
      VPCSecurityGroups: 
      - !GetAtt rdsDBSecurityGroup.GroupId
#Create Roles
  CodeDeployEC2ServiceRole:      
    Type: AWS::IAM::Role
    Properties: 
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "ec2.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        RoleName: "CodeDeployEC2ServiceRole" 
  CodeDeployServiceRole:      
    Type: AWS::IAM::Role
    Properties: 
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "codedeploy.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        RoleName: "CodeDeployServiceRole" 
  #Create Plolicies
  Policy1:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
        ManagedPolicyName: "circleci-ec2-ami"
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action: 
                - "ec2:AttachVolume"
                - "ec2:AuthorizeSecurityGroupIngress"
                - "ec2:CopyImage"
                - "ec2:CreateImage"
                - "ec2:CreateKeypair"
                - "ec2:CreateSecurityGroup"
                - "ec2:CreateSnapshot"
                - "ec2:CreateTags"
                - "ec2:CreateVolume"
                - "ec2:DeleteKeyPair"
                - "ec2:DeleteSecurityGroup"
                - "ec2:DeleteSnapshot"
                - "ec2:DeleteVolume"
                - "ec2:DeregisterImage"
                - "ec2:DescribeImageAttribute"
                - "ec2:DescribeImages"
                - "ec2:DescribeInstances"
                - "ec2:DescribeInstanceStatus"
                - "ec2:DescribeRegions"
                - "ec2:DescribeSecurityGroups"
                - "ec2:DescribeSnapshots"
                - "ec2:DescribeSubnets"
                - "ec2:DescribeTags"
                - "ec2:DescribeVolumes"
                - "ec2:DetachVolume"
                - "ec2:GetPasswordData"
                - "ec2:ModifyImageAttribute"
                - "ec2:ModifyInstanceAttribute"
                - "ec2:ModifySnapshotAttribute"
                - "ec2:RegisterImage"
                - "ec2:RunInstances"
                - "ec2:StopInstances"
                - "ec2:TerminateInstances"
              Resource: "*"
        Users:
          - "circleci"
  Policy2:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
        ManagedPolicyName: "CodeDeploy-EC2-S3"
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action:
               - "s3:Get*"
               - "s3:List*"
              Resource: "*"
        Roles:
          - !Ref "CodeDeployEC2ServiceRole"
  Policy3:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
        ManagedPolicyName: "CircleCI-Upload-To-S3"
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action: 
                - "s3:PutObject"
              Resource: "*"
        Users:
          - "circleci"
  Policy4:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
        ManagedPolicyName: "CirlceCI-Code-Deploy"
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action:
                - "codedeploy:RegisterApplicationRevision"
                - "codedeploy:GetApplicationRevision"
              Resource: !Join 
                          - ":"
                          - - "arn:aws:codedeploy"
                            - !Ref AWS::Region
                            - !Ref AWS::AccountId
                            - "application"
                            - !Sub ${bucket}
            -
              Effect: "Allow"
              Action: 
                - "codedeploy:CreateDeployment"
                - "codedeploy:GetDeployment"
              Resource: "*"  
            -
              Effect: "Allow"
              Action: 
                - "codedeploy:GetDeploymentConfig"
              Resource: 
                - !Join 
                    - ":"
                    - - "arn:aws:codedeploy"
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId 
                      - "deploymentconfig:CodeDeployDefault.OneAtATime"
                - !Join 
                    - ":"
                    - - "arn:aws:codedeploy"
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId
                      - "deploymentconfig:CodeDeployDefault.HalfAtATime"
                - !Join 
                    - ":"
                    - - "arn:aws:codedeploy"
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId
                      - "deploymentconfig:CodeDeployDefault.AllAtOnce"
        Users:
          - "circleci"