AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  refStackName: 
    Type: String
  amiId:
    Type: String
  roleStackName:
    Type: String
  rdsDBUser:
    Type: String
  rdsDBPass:
    Type: String
  S3BucketName:
    Type: String
  RDSEndPoint:
    Type: String
  roleArn:
    Type: String
  fromEmail:
    Type: String
  huskyId:
    Type: String
  autoscaleRoleArn:
    Type: String
  certificateArn:
    Type: String
Resources: 
  Application:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: "csye6225-webapp"     
      ComputePlatform: Server

  DeploymentGroup: 
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: !Ref Application
      DeploymentGroupName: "csye6225-webapp-deployment"
      DeploymentConfigName: "CodeDeployDefault.AllAtOnce"
      AutoRollbackConfiguration:
        Enabled: True
        Events: 
         - "DEPLOYMENT_FAILURE"
      DeploymentStyle:
        DeploymentOption: "WITHOUT_TRAFFIC_CONTROL"
        DeploymentType: "IN_PLACE"
      Ec2TagFilters:
          - 
            Key: 
              "csye6225"
            Value: 
              !Sub ${AWS::StackName}-Ec2Instance
            Type: 
              "KEY_AND_VALUE"
      ServiceRoleArn:
        Fn::ImportValue:
          !Sub ${roleStackName}-CodeDeployServiceRole-Arn
 

# Create DynamoDB
  dynamoDB: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "csye6225"
      

# Setup DBSecurity Group
  rdsDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web Servers
      VpcId: 
        Fn::ImportValue:
          !Sub "${refStackName}-vpcId"
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref WebappSecurityGroup
        IpProtocol: tcp
        FromPort: "3306"
        ToPort: "3306"
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-csye6225-rdsDBSecurityGroup
  
# Setup RDS Subnet Group
  rdsSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: "Subnet for RDS instances"
      SubnetIds:
      - Fn::ImportValue:
          !Sub "${refStackName}-SubA"
      - Fn::ImportValue:
          !Sub "${refStackName}-SubB"
      - Fn::ImportValue:
          !Sub "${refStackName}-SubC"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-csye6225-rdsSubnetGroup

#Create RDS Instance
  rdsInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 5
      DBName: csye6225
      Engine: MySQL
      DBInstanceClass: db.t2.medium
      MultiAZ: false
      DBInstanceIdentifier: csye6225-spring2019
      MasterUsername: csye6225master
      MasterUserPassword: csye6225password
      PubliclyAccessible: true
      DBSubnetGroupName: !Ref rdsSubnetGroup
      VPCSecurityGroups: 
      - !GetAtt rdsDBSecurityGroup.GroupId

  Lambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: csye6225-lambda-function
      Handler: "index.handler"
      Role: !Sub ${roleArn}
      MemorySize: 256
      Timeout: 120
      Code: 
        ZipFile: |
          import json
          import cfnresponse
          def handler(event, context):
            responseValue = int(event['ResourceProperties']['Input']) * 5
            responseData = {}
            responseData['Data'] = responseValue
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
      Runtime: "python3.6"
      Environment:
        Variables:
          DynamoDB_TableName: csye6225
          From_EmailAddress: !Sub ${fromEmail}

  snsTopic:      
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: "SNSTopic-DisplayName"
      Subscription:
        - Endpoint: !GetAtt Lambda.Arn
          Protocol: "lambda"
      TopicName: password_reset

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 
        - Lambda
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref snsTopic
      
  WebappSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web Servers
      VpcId: 
        Fn::ImportValue:
          !Sub "${refStackName}-vpcId"
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
      Tags:
      - Key: Name
        Value: WebappSecurityGroup

  LaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      KeyName: csye6225
      ImageId: !Sub ${amiId}
      LaunchConfigurationName: asg_launch_config
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        - DeviceName: /dev/sdm
          Ebs: 
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 20
      SecurityGroups: 
        - !Ref WebappSecurityGroup
      IamInstanceProfile: 
        Fn::ImportValue:
          !Sub "${roleStackName}-Ec2InstanceProfile"
      InstanceType: t2.micro
      UserData: 
        Fn::Base64:
          !Sub |
              #!/bin/sh
              sudo su
              cd /opt/tomcat/latest/webapps
              rm -rf *
              echo '#!/bin/sh' > /opt/tomcat/latest/bin/setenv.sh 
              chmod +x /opt/tomcat/latest/bin/setenv.sh 
              echo 'JAVA_OPTS="$JAVA_OPTS -Dspring.profiles.active=dev"' >> /opt/tomcat/latest/bin/setenv.sh
              echo 'JAVA_OPTS="$JAVA_OPTS -Dspring.datasource.url=jdbc:mysql://${rdsInstance.Endpoint.Address}:3306/csye6225"' >> /opt/tomcat/latest/bin/setenv.sh
              echo 'JAVA_OPTS="$JAVA_OPTS -Dspring.datasource.username=${rdsDBUser}"' >> /opt/tomcat/latest/bin/setenv.sh
              echo 'JAVA_OPTS="$JAVA_OPTS -Dspring.datasource.password=${rdsDBPass}"' >> /opt/tomcat/latest/bin/setenv.sh
              echo 'JAVA_OPTS="$JAVA_OPTS -Dcsye6225.aws.bucket.name=${S3BucketName}"' >> /opt/tomcat/latest/bin/setenv.sh
              systemctl daemon-reload

  WebServerGroup: 
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties: 
      VPCZoneIdentifier: 
        - Fn::ImportValue:
            !Sub "${refStackName}-SubA"
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 3
      MaxSize: 10
      DesiredCapacity: 3
      Cooldown: 60
      ServiceLinkedRoleARN: !Sub ${autoscaleRoleArn}
      TargetGroupARNs: 
        - !Ref ALBTargetGroup
      Tags:
      - Key: csye6225
        Value: !Sub ${AWS::StackName}-Ec2Instance
        PropagateAtLaunch: true
  WebServerScaleUpPolicy: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: 60
      ScalingAdjustment: 1

  WebServerScaleDownPolicy: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: 60
      ScalingAdjustment: -1

  CPUAlarmHigh: 
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription: "Scale-up if CPU > 90% for 10 minutes"
      MetricName: "CPUUtilization"
      Namespace: "AWS/EC2"
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "2"
      Threshold: "90"
      AlarmActions: 
        - !Ref WebServerScaleUpPolicy
      Dimensions: 
        -
          Name: "AutoScalingGroupName"
          Value:  !Ref WebServerGroup
      ComparisonOperator: "GreaterThanThreshold"

  CPUAlarmLow: 
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription: "Scale-down if CPU < 70% for 10 minutes"
      MetricName: "CPUUtilization"
      Namespace: "AWS/EC2"
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "2"
      Threshold: "70"
      AlarmActions: 
        - !Ref "WebServerScaleDownPolicy"
      Dimensions: 
        - Name: "AutoScalingGroupName"
          Value: !Ref "WebServerGroup"
      ComparisonOperator: "LessThanThreshold"

  LoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security Group for LoadBalancer
      VpcId: 
        Fn::ImportValue:
          !Sub "${refStackName}-vpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: LoadBalancerSecurityGroup

  ApplicationLoadBalancer: 
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties: 
      Subnets: 
        - Fn::ImportValue:
            !Sub "${refStackName}-SubA"
        - Fn::ImportValue:
            !Sub "${refStackName}-SubB"
      SecurityGroups: 
        - !Ref LoadBalancerSecurityGroup

  ALBListener: 
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties: 
      Certificates:
        - CertificateArn: !Sub ${certificateArn}
      DefaultActions: 
        - Type: "forward"
          TargetGroupArn: !Ref "ALBTargetGroup"
      LoadBalancerArn: !Ref "ApplicationLoadBalancer"
      Port: "443"
      Protocol: "HTTPS"

  ALBTargetGroup: 
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties: 
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: "HTTP"
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          !Sub "${refStackName}-vpcId"

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties: 
      Name: !Sub "csye6225-spring2019-${huskyId}.me."
      Type: "A"
      HostedZoneName: !Sub "csye6225-spring2019-${huskyId}.me."
      AliasTarget: 
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
      